# docker-compose.yml

version: "3.7"

services:

#  redis:
#    container_name: redis
#    hostname: redis
#    networks:
#      - main
#    image: redis:alpine
#    expose:
#      - "6379"
#    restart: always
#
#  rabbit:
#    container_name: rabbit
#    hostname: rabbit
#    build:
#      context: rabbitmq
#      dockerfile: Dockerfile
#    networks:
#      - main
#    ports:
#      - "5672:5672"
#      - "15672:15672"
#    volumes:
#      - ./rabbitmq/rabbitmq.config:/etc/rabbitmq/rabbitmq.config:ro
#      - ./rabbitmq/definitions.json:/etc/rabbitmq/definitions.json:ro
#    restart: always

  postgres:
    container_name: postgres
    hostname: postgres
    image: postgres:12
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ./project_config/.env.postgres
    networks:
      - main
    restart: always

  pgbackups:
    container_name: pgbackups
    hostname: pgbackups
    image: prodrigestivill/postgres-backup-local
    restart: always
    user: postgres:postgres
    volumes:
      - ./backups:/backups
    links:
      - postgres
    depends_on:
      - postgres
    env_file:
      - ./project_config/.env.postgres
    networks:
      - main

  web:
    build: Back
    container_name: web
    expose:
      - "8000"
    command: sh -c "python manage.py makemigrations&& python manage.py migrate&& gunicorn Config.asgi:application --bind 0.0.0.0:8000 -w 3 -k uvicorn.workers.UvicornWorker --log-file -"
    volumes:
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/data
    env_file:
      - ./project_config/.env.back
    hostname: web
    image: web-image
    networks:
      - main
    depends_on:
      - postgres
#      - rabbit
#      - redis
    restart: always

#  celery_default_worker:
#    command: sh -c "\wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config worker -E -Q default -P gevent -c 5 -l INFO -n worker1@%h --pidfile= "
#    container_name: default_worker
#    env_file:
#      - .env.back
#    hostname: default_worker
#    volumes:
#      - ./wait-for:/bin/wait-for
#    image: web-image
#    networks:
#      - main
#    depends_on:
#      - web
#      - redis
#      - rabbit
#      - postgres
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 200M
#        reservations:
#          memory: 50M
#    restart: always
#
#  celery_ml_worker_1:
#    command: sh -c "wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config worker -E -Q ml_task -P gevent -c 5 -l INFO -n worker2@%h --pidfile= "
#    container_name: celery_ml_worker_1
#    env_file:
#      - .env.back
#    hostname: celery_ml_worker_1
#    volumes:
#        - media_volume:/home/app/web/data
#        - ./wait-for:/bin/wait-for
#    image: web-image
#    networks:
#      - main
#    depends_on:
#      - web
#      - redis
#      - rabbit
#      - postgres
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 200M
#        reservations:
#          memory: 50M
#    restart: always
#
#  celery_ml_worker_2:
#    command: sh -c "wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config worker -E -Q ml_task -P gevent -c 5 -l INFO -n worker3@%h --pidfile= "
#    container_name: celery_ml_worker_2
#    env_file:
#      - .env.back
#    hostname: celery_ml_worker_2
#    volumes:
#      - media_volume:/home/app/web/data
#      - ./wait-for:/bin/wait-for
#    image: web-image
#    networks:
#      - main
#    depends_on:
#      - web
#      - redis
#      - rabbit
#      - postgres
#    deploy:
#      restart_policy:
#        condition: on-failure
#      resources:
#        limits:
#          memory: 200M
#        reservations:
#          memory: 50M
#    restart: always
#
#  celery_solo_worker:
#    command: sh -c "wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config worker -E -Q solo_task -l INFO -P solo -n worker4@%h --pidfile= "
#    container_name: celery_solo_worker
#    env_file:
#      - .env.back
#    hostname: celery_solo_worker
#    volumes:
#      - ./wait-for:/bin/wait-for
#    image: web-image
#    networks:
#      - main
#    depends_on:
#      - web
#      - redis
#      - rabbit
#      - postgres
#    restart: always
#
#  celery_beat:
#    command: sh -c "wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config beat -l INFO --scheduler django_celery_beat.schedulers:DatabaseScheduler"
#    container_name: celery_beat
#    depends_on:
#      - web
#      - redis
#      - rabbit
#      - postgres
#    hostname: celery_beat
#    env_file:
#      - .env.back
#    volumes:
#      - ./wait-for:/bin/wait-for
#    image: web-image
#    networks:
#      - main
#    restart: always
#
#  flower:
#    container_name: flower
#    command: sh -c "wait-for redis:6379\
#      && wait-for rabbit:5672\
#      && wait-for web:8000\
#      && celery -A Config flower --basic_auth=user1:password1 --brocker=amqp://user1:password1@rabbit:5672/#/ --broker_api=http://user1:password1@rabbit:15672/api --address=0.0.0.0 --port=5555"
#    hostname: flower
#    image: web-image
#    volumes:
#      - ./wait-for:/bin/wait-for
#    networks:
#      - main
#    ports:
#      - "5555:5555"
#    links:
#      - redis
#    depends_on:
#      - redis
#      - rabbit
#    restart: always


  nginx:
    container_name: nginx
    image: nginx:alpine
    hostname: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/conf.d/default.conf
      - static_volume:/home/app/web/static
      - media_volume:/home/app/web/api/services/vtb_handler/media
    ports:
      - "8000:80"
    depends_on:
      - web
    networks:
      - main
    restart: always

networks:
  main:
    name: main
    driver: bridge

volumes:
  static_volume:
  media_volume:
  postgres_data:
